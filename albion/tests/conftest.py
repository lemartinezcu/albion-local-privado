import tempfile
from pathlib import Path

import pytest
from shapely.geometry import LineString

from albion.project import Project


@pytest.fixture
def project_name():
    return "test_project"


TMP_PROJECT_DUMP = Path(tempfile.mkstemp(".dump")[1])


@pytest.fixture
def project_export_path():
    return TMP_PROJECT_DUMP


@pytest.fixture
def project_srid():
    # Some parts of the project accept only the SRID 32632.
    # Changing this value to 32632 might fix an issue.
    return 32653


@pytest.fixture
def graph_name():
    return "graph_1"


@pytest.fixture
def sub_graph_name():
    return "graph_2"


@pytest.fixture
def scale():
    return 6


@pytest.fixture
def formation_code():
    # This code can't be modified easily.
    # It is used to generate expected_edge_sections, expected_node_sections and others...
    return 330


### Generated from public data

@pytest.fixture
def expected_edge_sections(graph_name, scale):
    # Generated by hand assuming the plugin is working as expected.
    # Depending on the sections created in 'test_create_named_sections' and the fixture 'formation_code'
    return {
        ('278476', '278480', graph_name, f'WE x{scale}',
         'LINESTRING(31739487.11535886 33490382.53471939,31739463.730740435 33490380.17582969)'),
        ('278471', '278486', graph_name, f'WE x{scale}',
         'LINESTRING(31739139.332845353 33490410.30364796,31739114.346100137 33490409.201024048)'),
        ('278468', '278487', graph_name, f'SN x{scale}',
         'LINESTRING(31739890.32621556 33490842.693133965,31739893.61553481 33490818.238960244)'),
        ('278471', '278491', graph_name, f'WE x{scale}',
         'LINESTRING(31739139.332845353 33490410.30364796,31739164.33243612 33490411.123935495)'),
        ('278470', '278483', graph_name, f'WE x{scale}',
         'LINESTRING(31739188.50165177 33490400.9562786,31739213.984019652 33490390.902104914)'),
        ('278467', '278491', graph_name, f'SN x{scale}',
         'LINESTRING(31739877.105068743 33490943.37103458,31739869.32883608 33490967.475386955)'),
        ('278492', '278493', graph_name, f'SN x{scale}',
         'LINESTRING(31739866.97031638 33491042.860104065,31739856.7242294 33491069.450140156)'),
        ('278472', '278485', graph_name, f'WE x{scale}',
         'LINESTRING(31739088.54338213 33490414.87739689,31739063.687613994 33490417.632459864)'),
        ('278473', '278478', graph_name, f'WE x{scale}',
         'LINESTRING(31739390.224366814 33490378.215854067,31739364.00023494 33490382.181372825)'),
        ('278474', '278484', graph_name, f'WE x{scale}',
         'LINESTRING(31739339.399457917 33490380.183067404,31739312.050103545 33490384.5340676)'),
        ('278469', '278483', graph_name, f'WE x{scale}',
         'LINESTRING(31739237.141651973 33490398.501019288,31739213.984019652 33490390.902104914)'),
        ('278467', '278482', graph_name, f'SN x{scale}',
         'LINESTRING(31739877.105068743 33490943.37103458,31739880.56194729 33490917.011343963)'),
        ('278465', '278489', graph_name, f'SN x{scale}',
         'LINESTRING(31739868.351147678 33490992.971628513,31739867.85010728 33491018.131008904)'),
        ('278465', '278491', graph_name, f'SN x{scale}',
         'LINESTRING(31739868.351147678 33490992.971628513,31739869.32883608 33490967.475386955)'),
        ('278466', '278488', graph_name, f'SN x{scale}',
         'LINESTRING(31739886.727383696 33490893.299955785,31739889.83284106 33490867.531293552)'),
        ('278470', '278490', graph_name, f'WE x{scale}',
         'LINESTRING(31739188.50165177 33490400.9562786,31739164.33243612 33490411.123935495)'),
        ('278474', '278478', graph_name, f'WE x{scale}',
         'LINESTRING(31739339.399457917 33490380.183067404,31739364.00023494 33490382.181372825)'),
        ('278471', '278490', graph_name, f'WE x{scale}',
         'LINESTRING(31739139.332845353 33490410.30364796,31739164.33243612 33490411.123935495)'),
        ('278475', '278481', graph_name, f'WE x{scale}',
         'LINESTRING(31739289.97998841 33490389.853033874,31739265.366564706 33490388.916301742)'),
        ('278477', '278480', graph_name, f'WE x{scale}',
         'LINESTRING(31739440.39252365 33490380.18717837,31739463.730740435 33490380.17582969)'),
        ('278475', '278484', graph_name, f'WE x{scale}',
         'LINESTRING(31739289.97998841 33490389.853033874,31739312.050103545 33490384.5340676)'),
        ('278467', '278490', graph_name, f'SN x{scale}',
         'LINESTRING(31739877.105068743 33490943.37103458,31739869.32883608 33490967.475386955)'),
        ('278477', '278479', graph_name, f'WE x{scale}',
         'LINESTRING(31739440.39252365 33490380.18717837,31739414.620868698 33490375.73565131)'),
        ('278473', '278479', graph_name, f'WE x{scale}',
         'LINESTRING(31739390.224366814 33490378.215854067,31739414.620868698 33490375.73565131)'),
        ('278472', '278486', graph_name, f'WE x{scale}',
         'LINESTRING(31739088.54338213 33490414.87739689,31739114.346100137 33490409.201024048)'),
        ('278469', '278481', graph_name, f'WE x{scale}',
         'LINESTRING(31739237.141651973 33490398.501019288,31739265.366564706 33490388.916301742)'),
        ('278466', '278482', graph_name, f'SN x{scale}',
         'LINESTRING(31739886.727383696 33490893.299955785,31739880.56194729 33490917.011343963)'),
        ('278468', '278488', graph_name, f'SN x{scale}',
         'LINESTRING(31739890.32621556 33490842.693133965,31739889.83284106 33490867.531293552)'),
        ('278489', '278492', graph_name, f'SN x{scale}',
         'LINESTRING(31739867.85010728 33491018.131008904,31739866.97031638 33491042.860104065)'),
        ('278493', '278494', graph_name, f'SN x{scale}',
         'LINESTRING(31739856.7242294 33491069.450140156,31739852.1386937 33491092.99685759)'),
        ('278465', '278490', graph_name, f'SN x{scale}',
         'LINESTRING(31739868.351147678 33490992.971628513,31739869.32883608 33490967.475386955)'),
        ('278470', '278491', graph_name, f'WE x{scale}',
         'LINESTRING(31739188.50165177 33490400.9562786,31739164.33243612 33490411.123935495)')
    }


@pytest.fixture
def expected_node_sections(graph_name, scale):
    # Generated by hand assuming the plugin is working as expected.
    # Depending on the sections created in 'test_create_named_sections' and the fixture 'formation_code'
    return {
        ('278484', 'TMRI_0781_1', 41.18, 62.83, graph_name, f'WE x{scale}',
         'LINESTRING(31739312.284515325 33490449.464510616,31739311.815691765 33490319.603624586)'),
        ('278492', 'TMRI_0831_1', 38.55, 56.68, graph_name, f'SN x{scale}',
         'LINESTRING(31739812.60179797 33491042.845015936,31739921.338834792 33491042.875192195)'),
        ('278471', 'TMRI_0721_1', 38.28, 57.5, graph_name, f'WE x{scale}',
         'LINESTRING(31739139.259372473 33490467.93896141,31739139.406318236 33490352.668334514)'),
        ('278494', 'TMRI_0850_1', 35.38, 54.89, graph_name, f'SN x{scale}',
         'LINESTRING(31739793.609497305 33491093.00198783,31739910.667890098 33491092.99172735)'),
        ('278483', 'TMRI_0776_1', 42.3, 60.35, graph_name, f'WE x{scale}',
         'LINESTRING(31739213.992672753 33490445.042170636,31739213.975366548 33490336.76203919)'),
        ('278469', 'TMRI_0718_1', 39.91, 60.4, graph_name, f'WE x{scale}',
         'LINESTRING(31739237.05602483 33490459.964542642,31739237.22727912 33490337.037495937)'),
        ('278472', 'TMRI_0722_1', 37.13, 56.81, graph_name, f'WE x{scale}',
         'LINESTRING(31739088.62638451 33490473.91216862,31739088.460379746 33490355.842625156)'),
        ('278470', 'TMRI_0720_1', 40.37, 58.93, graph_name, f'WE x{scale}',
         'LINESTRING(31739188.80825132 33490456.60216459,31739188.19505222 33490345.310392607)'),
        ('278488', 'TMRI_0811_1', 42.9, 61.56, graph_name, f'SN x{scale}',
         'LINESTRING(31739833.98008415 33490868.001526814,31739945.685597975 33490867.06106029)'),
        ('278486', 'TMRI_0793_1', 38.77, 57.0, graph_name, f'WE x{scale}',
         'LINESTRING(31739114.19252193 33490463.882475857,31739114.49967834 33490354.519572236)'),
        ('278479', 'TMRI_0759_1', 42.97, 64.29, graph_name, f'WE x{scale}',
         'LINESTRING(31739414.435366224 33490439.660475675,31739414.806371167 33490311.81082695)'),
        ('278468', 'TMRI_0707_1', 40.97, 60.63, graph_name, f'SN x{scale}',
         'LINESTRING(31739831.34795033 33490842.68070815,31739949.3044808 33490842.70555978)'),
        ('278487', 'TMRI_0807_1', 41.38, 61.68, graph_name, f'SN x{scale}',
         'LINESTRING(31739832.757411674 33490818.590199422,31739954.473657943 33490817.88772107)'),
        ('278466', 'TMRI_0687_1', 41.05, 60.05, graph_name, f'SN x{scale}',
         'LINESTRING(31739829.798645284 33490893.484055877,31739943.65612211 33490893.11585569)'),
        ('278465', 'TMRI_0686_1', 38.81, 56.59, graph_name, f'SN x{scale}',
         'LINESTRING(31739815.01888294 33490993.08865478,31739921.68341241 33490992.854602247)'),
        ('278491', 'TMRI_0827_1', 38.31, 57.31, graph_name, f'WE x{scale}',
         'LINESTRING(31739164.1699321 33490468.06900236,31739164.494940136 33490354.178868633)'),
        ('278473', 'TMRI_0726_1', 42.75, 63.71, graph_name, f'WE x{scale}',
         'LINESTRING(31739390.110643648 33490441.09100695,31739390.338089984 33490315.34070119)'),
        ('278478', 'TMRI_0754_1', 42.0, 62.99, graph_name, f'WE x{scale}',
         'LINESTRING(31739364.018938366 33490445.148005273,31739363.98153151 33490319.214740377)'),
        ('278491', 'TMRI_0827_1', 38.31, 57.31, graph_name, f'SN x{scale}',
         'LINESTRING(31739812.383769214 33490967.83013052,31739926.27390294 33490967.120643392)'),
        ('278467', 'TMRI_0702_1', 39.59, 58.49, graph_name, f'SN x{scale}',
         'LINESTRING(31739820.41979136 33490943.558947504,31739933.790346123 33490943.18312166)'),
        ('278490', 'TMRI_0827_1', 38.31, 57.31, graph_name, f'SN x{scale}',
         'LINESTRING(31739812.383769214 33490967.83013052,31739926.27390294 33490967.120643392)'),
        ('278482', 'TMRI_0775_1', 40.17, 59.02, graph_name, f'SN x{scale}',
         'LINESTRING(31739824.040434066 33490917.303939197,31739937.083460514 33490916.71874873)'),
        ('278490', 'TMRI_0827_1', 38.31, 57.31, graph_name, f'WE x{scale}',
         'LINESTRING(31739164.1699321 33490468.06900236,31739164.494940136 33490354.178868633)'),
        ('278474', 'TMRI_0733_1', 42.1, 63.6, graph_name, f'WE x{scale}',
         'LINESTRING(31739339.611117024 33490444.668575004,31739339.187798806 33490315.697559804)'),
        ('278480', 'TMRI_0764_1', 42.0, 64.0, graph_name, f'WE x{scale}',
         'LINESTRING(31739463.74591289 33490446.173024222,31739463.715567976 33490314.178635158)'),
        ('278493', 'TMRI_0846_1', 36.7, 55.51, graph_name, f'SN x{scale}',
         'LINESTRING(31739800.305968773 33491069.48200355,31739913.142490022 33491069.418276757)'),
        ('278475', 'TMRI_0735_1', 41.4, 61.0, graph_name, f'WE x{scale}',
         'LINESTRING(31739289.760631733 33490448.63298687,31739290.19934509 33490331.073080882)'),
        ('278477', 'TMRI_0743_1', 42.2, 63.8, graph_name, f'WE x{scale}',
         'LINESTRING(31739439.945575517 33490444.928634197,31739440.839471783 33490315.445722543)'),
        ('278489', 'TMRI_0826_1', 38.48, 57.1, graph_name, f'SN x{scale}',
         'LINESTRING(31739812.009755615 33491018.012307905,31739923.690458942 33491018.249709904)'),
        ('278481', 'TMRI_0769_1', 42.04, 60.97, graph_name, f'WE x{scale}',
         'LINESTRING(31739265.004643355 33490445.66119942,31739265.728486057 33490332.171404064)'),
        ('278485', 'TMRI_0792_1', 36.41, 56.86, graph_name, f'WE x{scale}',
         'LINESTRING(31739063.74603215 33490478.965124507,31739063.629195843 33490356.29979522)'),
        ('278476', 'TMRI_0742_1', 40.81, 64.3, graph_name, f'WE x{scale}',
         'LINESTRING(31739487.279955816 33490452.985019986,31739486.950761907 33490312.084418792)')
    }


@pytest.fixture
def sn_section_line_1():
    return LineString(
        [
            [31739165.49, 33490819.19],
            [31739163.97, 33490842.67],
            [31739164.27, 33490869],
            [31739163.79, 33490893.8],
            [31739163.93, 33490918.07],
            [31739164.85, 33490943.68],
            [31739164.14, 33490968.07],
            [31739164.09, 33490993.08],
            [31739164.06, 33491017.57],
            [31739164.24, 33491042.81],
            [31739160.01, 33491069.33],
            [31739139.2, 33491092.93],
        ]
    )


@pytest.fixture
def sn_section_line_2():
    return LineString(
        [
            [31739063.62, 33490893.2],
            [31739064.14, 33490918.54],
            [31739063.9, 33490942.62],
            [31739064.23, 33490968.02],
            [31739064.82, 33490993.38]

        ]
    )


@pytest.fixture
def we_section_line_1():
    return LineString(
        [
            [31739064.23, 33490968.02],
            [31739088.99, 33490967.83],
            [31739113.76, 33490967.24],
            [31739138.95, 33490968.15],
            [31739164.14, 33490968.07],
            [31739189.41, 33490967.82],
            [31739214.15, 33490968.15],
            [31739237.06, 33490969.77],
            [31739251.89410868, 33490969.11662234],
            [31739264.37, 33490967.74],
            [31739289.41, 33490967.84],
            [31739313.11, 33490968.93],
            [31739339.63, 33490968.12],
            [31739364.18, 33490968.33],
            [31739389.56, 33490968.16],
            [31739414.2, 33490967.83],
            [31739439.53, 33490968.07],
            [31739464.01, 33490968.1],
            [31739487.82, 33490967.74],
        ]
    )


@pytest.fixture
def expected_section_polygons(graph_name, scale):
    return {
        (
            graph_name,
            f'WE x{scale}',
            'MULTIPOLYGON(((31739063.74603215 33490478.965124507,31739088.62638451 33490473.91216862,31739114.19252193 33490463.882475857,31739139.259372473 33490467.93896141,31739164.1699321 33490468.06900236,31739188.80825132 33490456.60216459,31739213.992672753 33490445.042170636,31739237.05602483 33490459.964542642,31739265.004643355 33490445.66119942,31739289.760631733 33490448.63298687,31739312.284515325 33490449.464510616,31739339.611117024 33490444.668575004,31739364.018938366 33490445.148005273,31739390.110643648 33490441.09100695,31739414.435366224 33490439.660475675,31739439.945575517 33490444.928634197,31739463.74591289 33490446.173024222,31739487.279955816 33490452.985019986,31739486.950761907 33490312.084418792,31739463.715567976 33490314.178635158,31739440.839471783 33490315.445722543,31739414.806371167 33490311.81082695,31739390.338089984 33490315.34070119,31739363.98153151 33490319.214740377,31739339.187798806 33490315.697559804,31739311.815691765 33490319.603624586,31739290.19934509 33490331.073080882,31739265.728486057 33490332.171404064,31739237.22727912 33490337.037495937,31739213.975366548 33490336.76203919,31739188.19505222 33490345.310392607,31739164.494940136 33490354.178868633,31739139.406318236 33490352.668334514,31739114.49967834 33490354.519572236,31739088.460379746 33490355.842625156,31739063.629195843 33490356.29979522,31739063.74603215 33490478.965124507)))'
        ), (
            graph_name,
            f'SN x{scale}',
            'MULTIPOLYGON(((31739815.01888294 33490993.08865478,31739812.009755615 33491018.012307905,31739812.60179797 33491042.845015936,31739800.305968773 33491069.48200355,31739793.609497305 33491093.00198783,31739910.667890098 33491092.99172735,31739913.142490022 33491069.418276757,31739921.338834792 33491042.875192195,31739923.690458942 33491018.249709904,31739921.68341241 33490992.854602247,31739926.27390294 33490967.120643392,31739933.790346123 33490943.18312166,31739937.083460514 33490916.71874873,31739943.65612211 33490893.11585569,31739945.685597975 33490867.06106029,31739949.3044808 33490842.70555978,31739954.473657943 33490817.88772107,31739832.757411674 33490818.590199422,31739831.34795033 33490842.68070815,31739833.98008415 33490868.001526814,31739829.798645284 33490893.484055877,31739824.040434066 33490917.303939197,31739820.41979136 33490943.558947504,31739812.383769214 33490967.83013052,31739815.01888294 33490993.08865478)))'
        )
    }


### For unit tests


@pytest.fixture
def holes():
    yield (0, 0, 0, 100), (100, 0, 0, 100), (100, 100, 0, 100), (200, 0, 0, 100)


@pytest.fixture
def reference_nodes():
    yield (
        {"from_": 20, "to_": 21, "hole_id": 0},
        {"from_": 10, "to_": 11, "hole_id": 1},  # candidate edge 1: angle ~ 5.71°
        {"from_": 40, "to_": 41, "hole_id": 1},  # candidate edge 2: angle ~ 11.31°
    )


@pytest.fixture
def offset_nodes():
    # candidate edge angles: start~5.71°, median~1.72°, end~2.29°
    yield (
        {"from_": 30, "to_": 31, "hole_id": 0},
        {"from_": 20, "to_": 35, "hole_id": 1},
    )


@pytest.fixture
def reference_nodes():
    yield (
        {"from_": 20, "to_": 21, "hole_id": 0},
        {"from_": 10, "to_": 11, "hole_id": 1},  # candidate edge 1: angle ~ 5.71°
        {"from_": 40, "to_": 41, "hole_id": 1},  # candidate edge 2: angle ~ 11.31°
    )


@pytest.fixture
def child_nodes():
    yield (
        {"from_": 40, "to_": 41, "hole_id": 0},
        # candidate edge 1: angle ~11.31° with respect to the first reference edge
        {"from_": 50, "to_": 51, "hole_id": 1},
    )


@pytest.fixture
def project_with_data(holes, project_name):
    """Create an Albion project with three dummy nodes (two of which will be used for graph generation,
    the third one being needed for completing at least one cell).

        Delete the graph (and the associated database) after the tests.

    """
    if Project.exists(project_name):
        Project.delete(project_name)
    project = Project.create(project_name, 32632)
    with project.connect() as con:
        cur = con.cursor()
        collar_query = """
            INSERT INTO albion.collar(id, geom, depth_)
            VALUES (%s, 'SRID=32632;POINT(%s %s %s)'::geometry, %s);
        """
        for idx, h in enumerate(holes):
            cur.execute(collar_query, (idx, *h))
    # Two cells are added through triangulation process
    project.triangulate()
    yield project
    Project.delete(project_name)


@pytest.fixture
def project(project_name, project_srid):
    if Project.exists(project_name):
        Project.delete(project_name)

    return Project.create(project_name, project_srid)
